{"version":3,"sources":["components/SearchContainer/SearchContainer.js","components/axios/api.js","components/UI/Table/Table.js","components/UI/Loader/Loader.js","components/SearchResult/SearchResult.js","components/Profile/Profile.js","components/About/About.js","App.js","serviceWorker.js","index.js"],"names":["SearchContainer","useState","searchType","setSearchType","searchValue","setSearchValue","className","name","onChange","event","target","value","defaultValue","type","to","pathname","search","disabled","axios","create","baseURL","Table","columns","data","hiddenColumns","filterInput","setFilterInput","filterID","setFilterID","filterRepos","setFilterRepos","useTable","initialState","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","e","undefined","placeholder","style","display","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","render","row","i","getRowProps","cells","cell","getCellProps","Loader","props","Avatars","src","alt","Login","SearchResult","useMemo","Header","accessor","Cell","setData","setType","loading","setLoading","noResponse","setNoResponse","useEffect","parsedSearch","qs","parse","location","a","get","toLowerCase","response","lenght","includes","items","el","reposName","login","owner","id","avatar_url","console","log","textAlign","withRouter","Meta","Card","match","params","user","setLogin","setUser","avatar","setAvatar","setId","company","setCompany","url","setUrl","followers","setFollowers","publicRepos","setPublicRepos","showFollowers","setShowFollowers","followersList","setFollowersList","res","html_url","public_repos","followerList","then","result","Object","entries","forEach","val","push","catch","err","gutter","span","onClick","history","goBack","width","cover","title","href","rel","d","key","About","fontSize","App","path","exact","component","Profile","Boolean","window","hostname","application","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.407fce0b.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport './index.css'\r\n\r\nconst SearchContainer = () => {\r\n\r\n    const [searchType, setSearchType] = useState('users');\r\n    const [searchValue, setSearchValue] = useState('');\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            <form className=\"card\">\r\n                <select name=\"select\" onChange={event => setSearchType(event.target.value)}>\r\n                    <option defaultValue value=\"users\">User Name</option> \r\n                    <option value=\"repositories\">Repository Name</option>\r\n                </select>\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={event => setSearchValue(event.target.value)}\r\n                />\r\n                <NavLink to={{\r\n                    pathname: '/search',\r\n                    search: `type=${searchType}&value=${searchValue}`,\r\n                }}>\r\n                    <button className=\"primary\" disabled={!searchValue} >Get Info</button>\r\n                </NavLink>\r\n            </form>\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchContainer;\r\n","import axios from 'axios'\r\n\r\nexport default axios.create({\r\n  baseURL: 'https://api.github.com/'\r\n})","import React, { useState } from \"react\";\r\nimport { useTable, useFilters, useSortBy } from \"react-table\";\r\n\r\nimport './Table.css'\r\n\r\nexport default function Table({ columns, data, hiddenColumns }) {\r\n  const [filterInput, setFilterInput] = useState(\"\");\r\n  const [filterID, setFilterID] = useState(\"\");\r\n  const [filterRepos, setFilterRepos] = useState(\"\");\r\n  \r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    setFilter\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      initialState: {\r\n        hiddenColumns: [hiddenColumns]\r\n      }\r\n    },\r\n    useFilters,\r\n    useSortBy\r\n  );\r\n  \r\n  const handleFilterChangeName = e => {\r\n    const value = e.target.value || undefined;\r\n    setFilter(\"login\", value);\r\n    setFilterInput(value);\r\n  };\r\n\r\n  const handleFilterChangeID = e => {\r\n    const value = e.target.value || undefined;\r\n    setFilter(\"id\", value);\r\n    setFilterID(value);\r\n  };\r\n\r\n  const handleFilterChangeRepos = e => {\r\n    const value = e.target.value || undefined;\r\n    setFilter(\"reposName\", value);\r\n    setFilterRepos(value);\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      <input\r\n        value={filterInput}\r\n        onChange={handleFilterChangeName}\r\n        placeholder={\"Search name\"}\r\n      />\r\n      <input\r\n        value={filterID}\r\n        onChange={handleFilterChangeID}\r\n        placeholder={\"Search id\"}\r\n      />\r\n      <input\r\n        value={filterRepos}\r\n        onChange={handleFilterChangeRepos}\r\n        placeholder={\"Search repos\"}\r\n        style={{display: hiddenColumns ? 'none' : ''}}\r\n      />\r\n      <p>Tip! Click on Header to sort column</p>\r\n      <br />\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th\r\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                  className={\r\n                    column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? \"sort-desc\"\r\n                        : \"sort-asc\"\r\n                      : \"\"\r\n                  }\r\n                >\r\n                  {column.render(\"Header\")}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n}","import React from 'react';\r\nimport './Loader.css'\r\n\r\nconst Loader = props => {\r\n    return (\r\n        <div className=\"center\">\r\n            <div className=\"lds-ripple\">\r\n                <div /><div />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader;\r\n","import React, { useMemo, useState, useEffect } from \"react\";\r\nimport axios from \"../axios/api\";\r\nimport qs from 'querystring';\r\nimport {NavLink} from 'react-router-dom';\r\nimport './index.css'\r\n\r\nimport Table from \"../UI/Table/Table\";\r\nimport Loader from \"../UI/Loader/Loader\";\r\n\r\nconst Avatars = ({ value }) => {\r\n  return (\r\n    <>\r\n      <img src={value} alt={value} className=\"badge\" />\r\n    </>\r\n  );\r\n};\r\n\r\nconst Login = ({ value }) => {\r\n    return (\r\n      <>\r\n        <NavLink to={`/user/${value}`}>\r\n            {value}\r\n        </NavLink>\r\n      </>\r\n    );\r\n  };\r\n\r\nfunction SearchResult(props) {\r\n    \r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: \"ID\",\r\n        accessor: \"id\",\r\n      },\r\n      {\r\n        Header: \"Login name\",\r\n        accessor: \"login\",\r\n        Cell: ({ cell: { value } }) => <Login value={value} />\r\n      },\r\n      {\r\n        Header: \"Avatar\",\r\n        accessor: \"avatar_url\",\r\n        Cell: ({ cell: { value } }) => <Avatars value={value} />\r\n      },\r\n      {\r\n        Header: \"Repos\",\r\n        accessor: \"reposName\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const [data, setData] = useState([]);\r\n  const [type, setType] = useState('');\r\n  // const [value, setValue] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [noResponse, setNoResponse] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const parsedSearch = qs.parse(props.location.search);\r\n    const type = parsedSearch['?type'];\r\n    const value = parsedSearch.value;\r\n    setType(type);\r\n    // setValue(searchValue);\r\n\r\n    (async () => {\r\n      try {\r\n        const response = await axios.get(`search/${type}?q=${value.toLowerCase()}`);\r\n        if (response.data.lenght === 0) return setNoResponse(true);\r\n        const data = type.includes('users')\r\n            ? response.data.items\r\n            : response.data.items.map(el => {\r\n                return {\r\n                    reposName: el.name,\r\n                    login: el.owner.login,\r\n                    id: el.owner.id,\r\n                    avatar_url: el.owner.avatar_url,\r\n                }\r\n            });\r\n        setData(data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n          console.log(error);\r\n          setNoResponse(true);\r\n      }\r\n    })();\r\n  }, [props]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      { noResponse\r\n        ? <h1 style={{textAlign: \"center\"}}>No results</h1>\r\n        : <div className=\"result_block\">\r\n          <p className=\"info_text\"> You search by {type} </p>\r\n          {loading\r\n              ? <Loader />\r\n              : <Table columns={columns} data={data} hiddenColumns={type.includes('user') ? 'reposName' : ''} />\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchResult;","import React, { useState, useEffect } from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport { Card, Col, Row } from 'antd';\r\nimport axios from '../axios/api';\r\nimport './index.css';\r\nimport 'antd/dist/antd.css';\r\nimport Loader from '../UI/Loader/Loader';\r\n\r\nfunction Profile(props) {\r\n  const { Meta } = Card;\r\n\r\n  const [login, setLogin] = useState(props.match.params.user)\r\n  const [user, setUser] = useState('');\r\n  const [avatar, setAvatar] = useState('');\r\n  const [id, setId] = useState('');\r\n  const [company, setCompany] = useState('');\r\n  const [url, setUrl] = useState('');\r\n  const [followers, setFollowers] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [publicRepos, setPublicRepos] = useState('');\r\n  const [showFollowers, setShowFollowers] = useState(false);\r\n  const [followersList, setFollowersList] = useState([{id: 0, name: 'No followers'}])\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const res = await axios.get(`/users/${login}`);\r\n      setLogin(res.data.login);\r\n      setUser(res.data.name);\r\n      setAvatar(res.data.avatar_url);\r\n      setCompany(res.data.company ? res.data.company : '-');\r\n      setId(res.data.id);\r\n      setFollowers(res.data.followers);\r\n      setUrl(res.data.html_url);\r\n      setPublicRepos(res.data.public_repos);\r\n      \r\n      if(followers) {\r\n        let followerList = [];\r\n        \r\n        axios.get(`/users/${login}/followers`)\r\n        .then((result) => {\r\n          Object.entries(result.data).forEach((val) => {\r\n            \r\n            followerList.push({\r\n              id: val[1].id,\r\n              name: val[1].login,\r\n            })\r\n          })\r\n          setFollowersList(followerList);\r\n        }).catch((err) => {\r\n          console.log(err);\r\n        });\r\n      }\r\n      setLoading(false);\r\n    })();\r\n  }, [followers, login]);\r\n\r\n  return (\r\n    <div className=\"profile\">\r\n      { loading\r\n        ? <Loader />\r\n        : <Row gutter={ 16 }>\r\n          <Col span={ 4 } >\r\n            <button className=\"primary\" onClick={() => props.history.goBack()}>Go Back</button>\r\n          </Col>\r\n          <Col>\r\n            <Card\r\n              style={ { width: 240, textAlign: 'center' } }\r\n              cover={ <img src={avatar} alt={`${user}-avatar`} /> }\r\n            >\r\n                <Meta\r\n                  title={ `${user || ''}` }\r\n                />\r\n            </Card>\r\n          </Col>\r\n          <Col>\r\n            <Card>\r\n              <div className=\"info\">\r\n                <ul>\r\n                  <li>ID:</li>\r\n                  <li>Company:</li>\r\n                  <li>Public Repos:</li>\r\n                  <li>Link to GitHub:</li>\r\n                  <li>Followers Count:</li>\r\n                </ul>\r\n                <ul>\r\n                  <li>{id}</li>\r\n                  <li>{company}</li>\r\n                  <li>{publicRepos}</li>\r\n                  <li><a href={url} rel=\"noopener noreferrer\" target=\"_blank\">{login}</a></li>\r\n                  <li className=\"tooltip\" onClick={() => setShowFollowers(!showFollowers)}>{followers}</li>\r\n                </ul>\r\n              </div>\r\n            </Card>\r\n          </Col>\r\n          {showFollowers &&\r\n            <Col>\r\n                <ul className=\"followers\">\r\n                    {followersList.map(d => (\r\n                      <li key={d.id}>{d.name}</li>\r\n                    ))}\r\n                </ul>\r\n            </Col>\r\n          }\r\n        </Row>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withRouter(Profile);","import React from 'react';\r\n\r\nfunction About() {\r\n    return (\r\n        <div style={{ fontSize: 'large', textAlign: 'center' }}>\r\n            This is app for search info about Github users.\r\n            You can search By Login or By Repositories.\r\n            Have fun!\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\nimport {Route, Switch, Redirect} from 'react-router-dom';\nimport './App.css';\nimport SearchContainer from './components/SearchContainer/SearchContainer';\nimport SearchResult from './components/SearchResult/SearchResult'\nimport Profile from './components/Profile/Profile';\nimport About from './components/About/About';\n\nfunction App() {\n  return (\n    <div>\n      <SearchContainer />\n      <Switch>\n        <Route path=\"/\" exact component={About} />\n        <Route path=\"/search\" exact component={SearchResult} />\n        <Route path=\"/user/:user\" exact component={Profile} />\n        <Redirect to=\"/\" />\n        {/* <Route render={() => <h1 style={{color: 'red'}}>404 Not Found</h1>} /> */}\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nconst application = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    {application}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}